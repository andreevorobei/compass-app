'use client'

import React, { useState, useRef, useEffect } from 'react'
import { Send, Bot, User } from 'lucide-react'
import { useRouter } from 'next/navigation'

interface Message {
  role: 'user' | 'assistant'
  content: string
  timestamp: Date
}

interface ProfileUpdate {
  timestamp: string
  data: any
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
const extractInterests = (messages: Message[]): string[] => {
  const interests: string[] = []
  messages.forEach(msg => {
    if (msg.role === 'user') {
      const content = msg.content.toLowerCase()
      if (content.includes('–Ω—Ä–∞–≤–∏—Ç—Å—è') || content.includes('—É–≤–ª–µ—á–µ–Ω–∏—è') || 
          content.includes('—Ö–æ–¥–∏—Ç—å') || content.includes('—Å–æ–∑–¥–∞–≤–∞—Ç—å') ||
          content.includes('—É–ø—Ä–∞–≤–ª—è—Ç—å') || content.includes('–ø–∏—Å–∞—Ç—å')) {
        const items = msg.content.split(',').map(item => item.trim()).filter(item => item.length > 2)
        interests.push(...items)
      }
    }
  })
  return Array.from(new Set(interests)) // —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
}

const extractSkills = (messages: Message[]): string[] => {
  const skills: string[] = []
  messages.forEach(msg => {
    if (msg.role === 'user') {
      const content = msg.content.toLowerCase()
      if (content.includes('—É–º–µ—é') || content.includes('–Ω–∞–≤—ã–∫–∏') ||
          content.includes('—á–∏—Ç–∞—Ç—å') || content.includes('–∫–æ–¥') ||
          content.includes('–∞–Ω–∞–ª–∏–∑') || content.includes('—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')) {
        const items = msg.content.split(',').map(item => item.trim()).filter(item => item.length > 2)
        skills.push(...items)
      }
    }
  })
  return Array.from(new Set(skills))
}

const extractPreferences = (messages: Message[]): any => {
  const preferences: any = {}
  messages.forEach(msg => {
    if (msg.role === 'user') {
      const content = msg.content.toLowerCase()
      if (content.includes('–∫–æ–º–∞–Ω–¥')) preferences.teamwork = '–∫–æ–º–∞–Ω–¥–Ω–∞—è'
      if (content.includes('—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω')) preferences.teamwork = '—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è'
      if (content.includes('–ª—é–¥–∏')) preferences.workType = '—Å –ª—é–¥—å–º–∏'
      if (content.includes('–¥–∞–Ω–Ω—ã–µ')) preferences.workType = '—Å –¥–∞–Ω–Ω—ã–º–∏'
      if (content.includes('—Å–æ–∑–¥–∞–≤–∞—Ç—å')) preferences.workType = '—Å–æ–∑–¥–∞–Ω–∏–µ'
      if (content.includes('—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å')) preferences.priority = '—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å'
      if (content.includes('–≤—ã–∑–æ–≤')) preferences.priority = '–Ω–æ–≤—ã–µ –≤—ã–∑–æ–≤—ã'
    }
  })
  return preferences
}

export default function ChatInterface() {
  const [messages, setMessages] = useState<Message[]>([
    {
      role: 'assistant',
      content: '–ü—Ä–∏–≤–µ—Ç! –Ø Jess, —Ç–≤–æ–π –∫–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ—É—á –≤ Compass. –°–µ–π—á–∞—Å –º—ã –ø—Ä–æ–π–¥–µ–º –±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—ã–µ –∫–∞—Ä—å–µ—Ä–Ω—ã–µ –ø—É—Ç–∏ –∏–º–µ–Ω–Ω–æ –¥–ª—è —Ç–µ–±—è. –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ 5-7 –º–∏–Ω—É—Ç.\n\n–ù–∞—á–Ω–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞: –Ω–∞–ø–∏—à–∏ 5-10 –≤–µ—â–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –ù–†–ê–í–ò–¢–°–Ø –¥–µ–ª–∞—Ç—å –∏ –ø—Ä–∏–Ω–æ—Å—è—Ç —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ. –≠—Ç–æ –º–æ–≥—É—Ç –±—ã—Ç—å —Ö–æ–±–±–∏, —É–≤–ª–µ—á–µ–Ω–∏—è, —Ç–∏–ø—ã –∑–∞–¥–∞—á - –ø–∏—à–∏ –ø–µ—Ä–≤–æ–µ, —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –≥–æ–ª–æ–≤—É, –Ω–µ –æ–±–¥—É–º—ã–≤–∞–π.',
      timestamp: new Date()
    }
  ])
  const [input, setInput] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [profileData, setProfileData] = useState<any>(null)
  const [currentStage, setCurrentStage] = useState<string>('data_collection')
  const [isCompleted, setIsCompleted] = useState(false)
  const router = useRouter()
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!input.trim() || isLoading) return

    const userMessage: Message = {
      role: 'user',
      content: input.trim(),
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    setInput('')
    setIsLoading(true)

    try {
      console.log('üöÄ Sending message to API:', userMessage.content)
      
      const response = await fetch('/api/ai', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          messages: [...messages, userMessage].map(msg => ({
            role: msg.role,
            content: msg.content
          }))
        }),
      })

      if (!response.ok) {
        throw new Error(`API error: ${response.status}`)
      }

      const text = await response.text()
      console.log('üì¶ Full response text:', text)
      
      let content = ''
      try {
        // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
        const data = JSON.parse(text)
        console.log('üìã Parsed JSON:', data)
        content = data.content || data.message || text
      } catch (e) {
        // –ï—Å–ª–∏ –Ω–µ JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
        console.log('üìù Using raw text')
        content = text
      }
      
      const assistantMessage: Message = {
        role: 'assistant',
        content: content || '–ü—Ä–∏–≤–µ—Ç! –Ø Jess, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –≤–∞—à –∫–∞—Ä—å–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ –æ –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö!',
        timestamp: new Date()
      }
      setMessages(prev => {
        const newMessages = [...prev, assistantMessage]
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
        if (content.includes('–ü–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º') || 
            content.includes('–∫–∞—Ä—å–µ—Ä–Ω—ã—Ö –ø—É—Ç–µ–π') || 
            content.includes('–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—é —Ç–µ–±—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É') ||
            content.includes('–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º')) {
          setIsCompleted(true)
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
          const conversationData = {
            interests: extractInterests(newMessages),
            skills: extractSkills(newMessages),
            preferences: extractPreferences(newMessages),
            messages: newMessages,
            completedAt: new Date().toISOString()
          }
          localStorage.setItem('compass_profile_data', JSON.stringify(conversationData))
        }
        
        return newMessages
      })

      console.log('‚úÖ Message completed successfully')

    } catch (error) {
      console.error('‚ùå Chat Error:', error)
      setMessages(prev => [...prev, {
        role: 'assistant',
        content: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        timestamp: new Date()
      }])
    } finally {
      setIsLoading(false)
    }
  }

  const getStageDescription = (stage: string) => {
    switch(stage) {
      case 'data_collection': return 'üìù –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'
      case 'summary_confirmation': return 'üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ'
      case 'additions': return '‚úèÔ∏è –î–æ–ø–æ–ª–Ω–µ–Ω–∏—è'
      case 'ready_for_results': return 'üéØ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º'
      default: return 'üöÄ –ö–∞—Ä—å–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑'
    }
  }

  return (
    <div className="h-screen bg-gray-50 flex flex-col py-4">
      <div className="max-w-6xl mx-auto px-4 flex-1 flex flex-col">
        <div className="flex gap-6 flex-1">
          {/* Chat Section */}
          <div className="flex-1 bg-white rounded-lg shadow-lg flex flex-col">
            <div className="p-6 border-b flex-shrink-0">
              <div className="flex items-center justify-between">
                <div>
                  <h2 className="text-2xl font-bold text-gray-800">AI Career Coach - Jess</h2>
                  <p className="text-gray-600">–ù–∞–π–¥–µ–º –∏–¥–µ–∞–ª—å–Ω—ã–µ –∫–∞—Ä—å–µ—Ä–Ω—ã–µ –ø—É—Ç–∏ –∏–º–µ–Ω–Ω–æ –¥–ª—è —Ç–µ–±—è</p>
                </div>
                <div className="text-right">
                  <div className="text-sm font-medium text-blue-600">{getStageDescription(currentStage)}</div>
                  <div className="text-xs text-gray-500">–≠—Ç–∞–ø {currentStage === 'data_collection' ? '1' : currentStage === 'summary_confirmation' ? '2' : currentStage === 'additions' ? '3' : '4'} –∏–∑ 4</div>
                </div>
              </div>
            </div>
            
            <div className="flex-1 overflow-y-auto p-6 space-y-4">
              {messages.map((message, index) => (
                <div
                  key={index}
                  className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  <div
                    className={`max-w-lg p-4 rounded-lg ${
                      message.role === 'user'
                        ? 'bg-blue-500 text-white'
                        : 'bg-gray-100 text-gray-900'
                    }`}
                  >
                    <div className="whitespace-pre-wrap">
                      {message.role === 'assistant' ? (
                        <div 
                          dangerouslySetInnerHTML={{
                            __html: message.content
                              .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                              .replace(/(?<!\*)\\*([^*]+)\\*(?!\*)/g, '<em>$1</em>')
                              .replace(/\n/g, '<br/>')
                          }}
                        />
                      ) : (
                        message.content
                      )}
                    </div>
                  </div>
                </div>
              ))}
              
              {isLoading && (
                <div className="flex justify-start">
                  <div className="bg-gray-100 p-4 rounded-lg max-w-lg">
                    <div className="flex items-center space-x-2">
                      <div className="text-gray-500">Jess –ø–µ—á–∞—Ç–∞–µ—Ç...</div>
                      <div className="flex space-x-1">
                        <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce"></div>
                        <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                        <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                      </div>
                    </div>
                  </div>
                </div>
              )}
              
              {/* –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º */}
              {isCompleted && (
                <div className="flex justify-center p-6">
                  <button
                    onClick={() => router.push('/results')}
                    className="bg-green-500 text-white px-8 py-4 rounded-lg text-lg font-semibold hover:bg-green-600 transition-colors shadow-lg animate-pulse"
                  >
                    üöÄ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–º –∫–∞—Ä—å–µ—Ä–Ω—ã–º –ø—É—Ç—è–º
                  </button>
                </div>
              )}
              
              <div ref={messagesEndRef} />
            </div>
            
            <form onSubmit={handleSubmit} className="p-6 border-t flex-shrink-0">
              <div className="flex gap-3">
                <input
                  value={input}
                  onChange={(e) => setInput(e.target.value)}
                  placeholder="–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç..."
                  className="flex-1 p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  disabled={isLoading}
                />
                <button
                  type="submit"
                  disabled={isLoading || !input.trim()}
                  className="px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center gap-2"
                >
                  <Send size={18} />
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                </button>
              </div>
            </form>
          </div>

          {/* Progress Panel */}
          <div className="w-80 bg-white rounded-lg shadow-lg p-6 flex flex-col">
            <div className="flex-shrink-0">
              <h3 className="font-bold text-gray-800 mb-4 text-lg">üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞</h3>
            </div>
            
            <div className="flex-1 flex flex-col">
              <div className="space-y-3 mb-6">
                <div className={`p-3 rounded-lg border-2 transition-all ${currentStage === 'data_collection' ? 'border-blue-500 bg-blue-50' : 'border-gray-200 bg-gray-50'}`}>
                  <div className="font-medium text-sm">1. –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö</div>
                  <div className="text-xs text-gray-600">–ò–Ω—Ç–µ—Ä–µ—Å—ã –∏ –Ω–∞–≤—ã–∫–∏</div>
                </div>
                <div className={`p-3 rounded-lg border-2 transition-all ${currentStage === 'summary_confirmation' ? 'border-blue-500 bg-blue-50' : 'border-gray-200 bg-gray-50'}`}>
                  <div className="font-medium text-sm">2. –†–µ–∑—é–º–µ –ø—Ä–æ—Ñ–∏–ª—è</div>
                  <div className="text-xs text-gray-600">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</div>
                </div>
                <div className={`p-3 rounded-lg border-2 transition-all ${currentStage === 'additions' ? 'border-blue-500 bg-blue-50' : 'border-gray-200 bg-gray-50'}`}>
                  <div className="font-medium text-sm">3. –î–æ–ø–æ–ª–Ω–µ–Ω–∏—è</div>
                  <div className="text-xs text-gray-600">–£—Ç–æ—á–Ω–µ–Ω–∏—è –∏ –ø—Ä–∞–≤–∫–∏</div>
                </div>
                <div className={`p-3 rounded-lg border-2 transition-all ${currentStage === 'ready_for_results' ? 'border-green-500 bg-green-50' : 'border-gray-200 bg-gray-50'}`}>
                  <div className="font-medium text-sm">4. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã</div>
                  <div className="text-xs text-gray-600">–ö–∞—Ä—å–µ—Ä–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</div>
                </div>
              </div>

              {profileData && (
                <div className="bg-green-50 border border-green-200 rounded-lg p-4 mt-auto">
                  <div className="font-medium text-green-800 mb-2">üìã –°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</div>
                  <div className="text-sm text-green-700 space-y-1">
                    {profileData.interests && <div>‚úì –ò–Ω—Ç–µ—Ä–µ—Å—ã: {profileData.interests.length}</div>}
                    {profileData.skills && <div>‚úì –ù–∞–≤—ã–∫–∏: {profileData.skills.length}</div>}
                    {profileData.preferences && <div>‚úì –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: –∑–∞–ø–æ–ª–Ω–µ–Ω—ã</div>}
                    {profileData.summary && <div>‚úì –†–µ–∑—é–º–µ: —Å–æ–∑–¥–∞–Ω–æ</div>}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  )
} 