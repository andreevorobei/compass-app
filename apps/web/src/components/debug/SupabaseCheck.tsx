'use client'

import { useEffect, useState } from 'react'
import { supabase } from '@/lib/db/supabase'

export default function SupabaseCheck() {
  const [status, setStatus] = useState<{
    isConnected: boolean
    error?: string
    userCount?: number
  }>({ isConnected: false })

  useEffect(() => {
    checkSupabaseConnection()
  }, [])

  const checkSupabaseConnection = async () => {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...')
      
      // –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ auth
      const { data, error } = await supabase.auth.getSession()
      
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error)
        setStatus({ 
          isConnected: false, 
          error: `–û—à–∏–±–∫–∞: ${error.message}` 
        })
        return
      }

      // –ü—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      try {
        const { count, error: countError } = await supabase
          .from('profiles')
          .select('*', { count: 'exact', head: true })

        if (countError) {
          console.warn('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ profiles –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', countError)
          setStatus({ 
            isConnected: true, 
            error: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –µ—Å—Ç—å, –Ω–æ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã' 
          })
        } else {
          console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!')
          setStatus({ 
            isConnected: true, 
            userCount: count || 0 
          })
        }
      } catch (dbError: any) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î:', dbError)
        setStatus({ 
          isConnected: true, 
          error: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –µ—Å—Ç—å, –Ω–æ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö' 
        })
      }

    } catch (error: any) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
      setStatus({ 
        isConnected: false, 
        error: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}` 
      })
    }
  }

  return (
    <div className="fixed bottom-4 right-4 bg-white border border-gray-300 rounded-lg shadow-lg p-4 max-w-sm">
      <h3 className="font-semibold text-gray-900 mb-2">üîß –°—Ç–∞—Ç—É—Å Supabase</h3>
      
      <div className="space-y-2 text-sm">
        <div className="flex items-center space-x-2">
          <div className={`w-3 h-3 rounded-full ${
            status.isConnected ? 'bg-green-500' : 'bg-red-500'
          }`} />
          <span>{status.isConnected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ'}</span>
        </div>

        {status.error && (
          <div className="text-red-600 text-xs">
            {status.error}
          </div>
        )}

        {status.userCount !== undefined && (
          <div className="text-gray-600 text-xs">
            –ü—Ä–æ—Ñ–∏–ª–µ–π –≤ –ë–î: {status.userCount}
          </div>
        )}

        <div className="mt-3 text-xs text-gray-500">
          –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å (F12) –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
        </div>
      </div>
    </div>
  )
} 