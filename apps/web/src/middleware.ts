import { createServerClient } from '@supabase/ssr'
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export async function middleware(req: NextRequest) {
  let response = NextResponse.next({
    request: {
      headers: req.headers,
    },
  })

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return req.cookies.get(name)?.value
        },
        set(name: string, value: string, options: any) {
          req.cookies.set({
            name,
            value,
            ...options,
          })
          response = NextResponse.next({
            request: {
              headers: req.headers,
            },
          })
          response.cookies.set({
            name,
            value,
            ...options,
          })
        },
        remove(name: string, options: any) {
          req.cookies.set({
            name,
            value: '',
            ...options,
          })
          response = NextResponse.next({
            request: {
              headers: req.headers,
            },
          })
          response.cookies.set({
            name,
            value: '',
            ...options,
          })
        },
      },
    }
  )

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const {
    data: { session },
  } = await supabase.auth.getSession()
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const {
    data: { user },
  } = await supabase.auth.getUser()
  
  // –ï—Å–ª–∏ —ç—Ç–æ redirect –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞, –¥–∞–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
  const isRedirectFromLogin = req.nextUrl.searchParams.has('redirectTo')
  if (isRedirectFromLogin && !session && !user) {
    console.log('‚è≥ Redirect –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞, –∂–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏...')
    // –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
    await new Promise(resolve => setTimeout(resolve, 100))
    const { data: { session: sessionRetry } } = await supabase.auth.getSession()
    const { data: { user: userRetry } } = await supabase.auth.getUser()
    console.log('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:', { session: !!sessionRetry, user: !!userRetry })
  }

  // –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã (—Ç—Ä–µ–±—É—é—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
  const protectedPaths = ['/dashboard', '/profile', '/chat', '/goals', '/analytics']
  
  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)
  const authPaths = ['/login', '/register']
  
  const isProtectedPath = protectedPaths.some(path => 
    req.nextUrl.pathname.startsWith(path)
  )
  
  const isAuthPath = authPaths.some(path => 
    req.nextUrl.pathname.startsWith(path)
  )

  // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ redirect –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–π—Ç–∏ –Ω–∞ –∑–∞—â–∏—â–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  if (isProtectedPath && !session && !user) {
    console.log('üö´ MIDDLEWARE –ë–õ–û–ö–ò–†–£–ï–¢:', req.nextUrl.pathname, 'session:', !!session, 'user:', !!user)
    const redirectUrl = new URL('/login', req.url)
    redirectUrl.searchParams.set('redirectTo', req.nextUrl.pathname)
    // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û: return NextResponse.redirect(redirectUrl)
  }

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Ö–æ–¥–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  if (isAuthPath && (session || user)) {
    return NextResponse.redirect(new URL('/chat', req.url))
  }

  return response
}

export const config = {
  matcher: [
    '/((?!api|_next/static|_next/image|favicon.ico).*)',
  ],
} 