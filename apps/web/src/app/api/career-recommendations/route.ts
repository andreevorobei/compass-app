import { openai } from '@ai-sdk/openai'
import { generateText } from 'ai'

export async function POST(req: Request) {
  console.log('üöÄ /api/career-recommendations called')
  
  try {
    const { profileData } = await req.json()
    
    console.log('üì® Received profile data:', {
      interests: profileData.interests?.length || 0,
      skills: profileData.skills?.length || 0,
      preferences: profileData.preferences,
      messages: profileData.messages?.length || 0
    })
    
    if (!profileData || !profileData.messages) {
      console.log('‚ùå Invalid profile data format')
      return Response.json({ 
        error: 'Invalid profile data format' 
      }, { status: 400 })
    }

    // –ü—Ä–æ–≤–µ—Ä–∏–º –µ—Å—Ç—å –ª–∏ OpenAI API –∫–ª—é—á
    const hasApiKey = !!process.env.OPENAI_API_KEY
    console.log('üîë OpenAI API Key present:', hasApiKey)
    
    if (!hasApiKey) {
      console.log('‚ùå No OpenAI API key found')
      return Response.json({ 
        error: 'OpenAI API key not configured' 
      }, { status: 500 })
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI –∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const conversationContext = profileData.messages
      .filter((msg: any) => msg.role === 'user')
      .map((msg: any) => msg.content)
      .join('\n\n')

    const prompt = `–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –∫–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∏ HR-–∞–Ω–∞–ª–∏—Ç–∏–∫. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é –∏ —Å–æ–∑–¥–∞–π 5 –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.

–î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
–ò–Ω—Ç–µ—Ä–µ—Å—ã: ${profileData.interests?.join(', ') || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}
–ù–∞–≤—ã–∫–∏: ${profileData.skills?.join(', ') || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}  
–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: ${JSON.stringify(profileData.preferences)}

–ü–û–õ–ù–´–ô –†–ê–ó–ì–û–í–û–† –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú:
${conversationContext}

–ó–ê–î–ê–ß–ê:
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–π 5 –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ö–∞–∂–¥–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:

{
  "title": "–¢–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏",
  "match": —á–∏—Å–ª–æ –æ—Ç 75 –¥–æ 98 (–ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è),
  "description": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
  "skills": ["–ù–∞–≤—ã–∫ 1", "–ù–∞–≤—ã–∫ 2", "–ù–∞–≤—ã–∫ 3", "–ù–∞–≤—ã–∫ 4"],
  "growth": "–í—ã—Å–æ–∫–∏–π/–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π/–°—Ç–∞–±–∏–ª—å–Ω—ã–π",
  "salary": "–î–∏–∞–ø–∞–∑–æ–Ω –∑–∞—Ä–ø–ª–∞—Ç—ã –≤ —Ä—É–±–ª—è—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: 120-280k ‚ÇΩ"
}

–í–ê–ñ–ù–û:
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–º–µ–Ω–Ω–æ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
- –£—á–∏—Ç—ã–≤–∞–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã —Ä—ã–Ω–∫–∞ —Ç—Ä—É–¥–∞ 2024 –≥–æ–¥–∞
- –î–µ–ª–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏
- –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–º–∏
- –ó–∞—Ä–ø–ª–∞—Ç—ã —É–∫–∞–∑—ã–≤–∞–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –º–∞—Å—Å–∏–≤ –∏–∑ 5 JSON –æ–±—ä–µ–∫—Ç–æ–≤, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:`

    console.log('ü§ñ Calling OpenAI for career recommendations...')
    
    const result = await generateText({
      model: openai('gpt-4o-mini'),
      prompt: prompt,
      temperature: 0.7,
      maxTokens: 2000,
    })

    console.log('‚úÖ AI Response received:', result.text.substring(0, 200) + '...')

    // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç AI –∫–∞–∫ JSON
    let careerPaths
    try {
      // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      let cleanedResponse = result.text.trim()
      
      // –ò—â–µ–º JSON –º–∞—Å—Å–∏–≤ –≤ –æ—Ç–≤–µ—Ç–µ
      const startIndex = cleanedResponse.indexOf('[')
      const endIndex = cleanedResponse.lastIndexOf(']') + 1
      
      if (startIndex !== -1 && endIndex !== -1) {
        cleanedResponse = cleanedResponse.substring(startIndex, endIndex)
      }
      
      careerPaths = JSON.parse(cleanedResponse)
      
      if (!Array.isArray(careerPaths)) {
        throw new Error('Response is not an array')
      }
      
    } catch (parseError) {
      console.error('‚ùå Failed to parse AI response as JSON:', parseError)
      console.log('Raw AI response:', result.text)
      
      // Fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–æ–±—â–µ–Ω–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
      careerPaths = [{
        title: "–ö–∞—Ä—å–µ—Ä–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
        match: 85,
        description: "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å –∫–∞—Ä—å–µ—Ä–Ω—ã–º –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π",
        skills: ["–°–∞–º–æ–∞–Ω–∞–ª–∏–∑", "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—å–µ—Ä—ã", "–ò–∑—É—á–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞ —Ç—Ä—É–¥–∞"],
        growth: "–í—ã—Å–æ–∫–∏–π",
        salary: "–ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"
      }]
    }

    console.log('üìã Generated career paths:', careerPaths.length)

    return Response.json({ 
      careerPaths: careerPaths,
      generatedAt: new Date().toISOString()
    })

  } catch (error) {
    console.error('‚ùå Career recommendations error:', error)
    return Response.json({ 
      error: 'Failed to generate career recommendations' 
    }, { status: 500 })
  }
} 