import OpenAI from 'openai'

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

const profileUpdateFunction = {
  name: 'update_profile',
  description: 'Updates user profile based on conversation analysis',
  parameters: {
    type: 'object',
    properties: {
      skills: {
        type: 'array',
        items: {
          type: 'object',  
          properties: {
            name: { type: 'string', description: 'Skill name' },
            level: { type: 'number', minimum: 0, maximum: 100, description: 'Skill level 0-100' },
            change: { type: 'string', description: 'What changed about this skill' }
          },
          required: ['name', 'level', 'change']
        }
      },
      current_role: { type: 'string', description: 'Current job title' },
      target_role: { type: 'string', description: 'Desired job title' },
      experience_years: { type: 'number', description: 'Years of experience' },
      goals: {
        type: 'array',
        items: { type: 'string' },
        description: 'Career goals mentioned'
      }
    }
  }
}

export async function POST(req: Request) {
  console.log('üöÄ API /ai called')
  
  try {
    const { messages } = await req.json()
    
    console.log('üì® Received messages:', messages?.length || 0)
    console.log('üì® Last message:', messages?.[messages.length - 1])
    
    if (!messages || !Array.isArray(messages) || messages.length === 0) {
      console.log('‚ùå Invalid messages format')
      return Response.json({ 
        error: 'Invalid messages format' 
      }, { status: 400 })
    }

    // –ü—Ä–æ–≤–µ—Ä–∏–º –µ—Å—Ç—å –ª–∏ OpenAI API –∫–ª—é—á
    const hasApiKey = !!process.env.OPENAI_API_KEY
    console.log('üîë OpenAI API Key present:', hasApiKey)
    
    if (!hasApiKey) {
      console.log('‚ùå No OpenAI API key found')
      return Response.json({
        error: 'OpenAI API key not configured'
      }, { status: 500 })
    }

    console.log('ü§ñ Calling OpenAI with function calling...')
    
    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'system',
          content: `–¢—ã AI –∫–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ—É—á –ø–æ –∏–º–µ–Ω–∏ Compass. 
      
–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
- –ü–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∫–∞—Ä—å–µ—Ä–Ω–æ–º —Ä–∞–∑–≤–∏—Ç–∏–∏
- –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ –≤—ã—è–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≤—ã–∫–∞—Ö, –æ–ø—ã—Ç–µ, —Ü–µ–ª—è—Ö
- –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–ø–æ–º–∏–Ω–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–∞–≤—ã–∫–∏, —Ä–æ–ª–∏, —Ü–µ–ª–∏ –∏–ª–∏ –æ–ø—ã—Ç - –≤—ã–∑—ã–≤–∞–π —Ñ—É–Ω–∫—Ü–∏—é update_profile
- –í–°–ï–ì–î–ê –æ—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ó–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö –ø–ª–∞–Ω–∞—Ö

–í–ê–ñ–ù–û: –î–∞–∂–µ –µ—Å–ª–∏ —Ç—ã –≤—ã–∑—ã–≤–∞–µ—à—å —Ñ—É–Ω–∫—Ü–∏—é update_profile, –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–∞–≤–∞–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!

–ü—Ä–∏–º–µ—Ä—ã:
- "–Ø Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫" ‚Üí –≤—ã–∑–æ–≤–∏ update_profile –ò –æ—Ç–≤–µ—Ç—å: "–û—Ç–ª–∏—á–Ω–æ! –Ø –∑–∞–ø–∏—Å–∞–ª —á—Ç–æ —Ç—ã Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫. –†–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ!"
- "–•–æ—á—É —Å—Ç–∞—Ç—å PM" ‚Üí –≤—ã–∑–æ–≤–∏ update_profile –ò –æ—Ç–≤–µ—Ç—å: "–ü–æ–Ω—è–ª! Product Manager - –æ—Ç–ª–∏—á–Ω–∞—è —Ü–µ–ª—å. –ß—Ç–æ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–±—è –≤ —ç—Ç–æ–π —Ä–æ–ª–∏?"
- "–†–∞–±–æ—Ç–∞—é 3 –≥–æ–¥–∞" ‚Üí –≤—ã–∑–æ–≤–∏ update_profile –ò –æ—Ç–≤–µ—Ç—å: "3 –≥–æ–¥–∞ –æ–ø—ã—Ç–∞ - —Ö–æ—Ä–æ—à–∞—è –±–∞–∑–∞! –í –∫–∞–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—à—å?"

–í—Å–µ–≥–¥–∞ –∫–æ–º–±–∏–Ω–∏—Ä—É–π function calling —Å –ø–æ–ª–µ–∑–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º –æ—Ç–≤–µ—Ç–æ–º!`
        },
        ...messages
      ],
      functions: [profileUpdateFunction],
      function_call: 'auto',
      temperature: 0.7,
      max_tokens: 1000
    })

    console.log('‚úÖ OpenAI response received')

    const message = response.choices[0]?.message
    
    if (!message) {
      throw new Error('No response from OpenAI')
    }

    let functionCallResult = null
    if (message.function_call) {
      try {
        functionCallResult = JSON.parse(message.function_call.arguments)
        console.log('üîÑ Function Call Result:', functionCallResult)
      } catch (error) {
        console.error('‚ùå Error parsing function call:', error)
      }
    }

    // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    let content = message.content || ''
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –Ω–æ –µ—Å—Ç—å function call, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    if (!content && functionCallResult) {
      content = '–û—Ç–ª–∏—á–Ω–æ! –Ø –æ–±–Ω–æ–≤–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ. –†–∞—Å—Å–∫–∞–∂–∏ –µ—â–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –æ —Å–≤–æ–µ–π –∫–∞—Ä—å–µ—Ä–µ!'
    }
    
    // –ï—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
    if (!content) {
      content = '–ò–∑–≤–∏–Ω–∏, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ú–æ–∂–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å?'
    }

    console.log('üì§ Sending response with content:', content.substring(0, 100) + '...')

    return Response.json({
      content: content,
      functionCall: functionCallResult,
      model: 'gpt-4o-mini'
    })

  } catch (error) {
    console.error('‚ùå AI API Error:', error)
    
    if (error instanceof Error) {
      console.error('Error message:', error.message)
      console.error('Error stack:', error.stack)
    }
    
    return Response.json({ 
      error: 'AI service temporarily unavailable. Please try again.',
      details: process.env.NODE_ENV === 'development' ? (error instanceof Error ? error.message : String(error)) : undefined
    }, { status: 500 })
  }
}
